شرح ملفات جافا في src/main/java/com/version0/lexora
=====================================================

يشرح هذا الملف الغرض الرئيسي لكل ملف جافا في بنية المشروع الخلفي (backend).

1.  **LexoraApplication.java**:
    *   **الوظيفة:** نقطة الدخول الرئيسية لتطبيق Spring Boot. يحتوي على الطريقة `main` التي تبدأ تشغيل التطبيق بأكمله.
    *   **الأهمية:** هو الملف الذي يتم تنفيذه لبدء تشغيل الخادم الخلفي.

2.  **config/SecurityConfig.java**:
    *   **الوظيفة:** يقوم بتكوين وتخصيص Spring Security. يحدد كيفية التعامل مع المصادقة (authentication) والترخيص (authorization)، وكيفية تجزئة (hash) كلمات المرور، وما هي المسارات (URLs) التي تتطلب تسجيل الدخول.
    *   **الأهمية:** مسؤول عن أمان التطبيق وحماية نقاط النهاية (API Endpoints).

3.  **controller/AuthController.java**:
    *   **الوظيفة:** يعمل كواجهة بين طلبات الويب (HTTP requests) القادمة من الواجهة الأمامية (frontend) ومنطق الأعمال (business logic) في الخدمات. يستقبل الطلبات مثل تسجيل الدخول (`/login`)، والتسجيل (`/register`)، والحصول على بيانات المستخدم الحالي (`/me`)، ويوجهها إلى `AuthService` للمعالجة.
    *   **الأهمية:** يحدد نقاط النهاية (API Endpoints) التي يمكن للواجهة الأمامية التفاعل معها للمصادقة.

4.  **database/DatabaseConfig.java**:
    *   **الوظيفة:** يحتوي على التكوين للاتصال اليدوي بقاعدة بيانات MySQL باستخدام JDBC. يتضمن دالة للحصول على اتصال (`getConnection`) ودالة لتهيئة قاعدة البيانات وإنشاء جدول المستخدمين (`initializeDatabase`) إذا لم يكن موجودًا.
    *   **الأهمية:** يُستخدم لإنشاء قاعدة البيانات والجدول الأولي عند بدء تشغيل التطبيق لأول مرة أو في البيئات التي لا تستخدم التهيئة التلقائية لـ Spring Data JPA بالكامل. (ملاحظة: في تطبيقات Spring Boot الحديثة، غالبًا ما تتم إدارة إنشاء الجداول تلقائيًا بواسطة Spring Data JPA بناءً على ملف `application.properties` ونماذج `@Entity`).

5.  **model/Utilisateur.java, Avocat.java, Secretaire.java**:
    *   **الوظيفة:** تمثل نماذج البيانات (Data Models) أو الكيانات (Entities) التي يتم تخزينها في قاعدة البيانات. `Utilisateur` هو الفئة الأساسية للمستخدم، بينما `Avocat` و `Secretaire` هما فئات فرعية ترث منها لتمثيل أنواع مختلفة من المستخدمين. تستخدم التعليقات التوضيحية (annotations) مثل `@Entity`, `@Table`, `@Column`, إلخ، لربط حقول الفئة بأعمدة الجدول في قاعدة البيانات.
    *   **الأهمية:** تحدد بنية البيانات التي يتعامل معها التطبيق ويخزنها.

6.  **repository/UserRepository.java**:
    *   **الوظيفة:** واجهة تعمل كطبقة الوصول إلى البيانات (Data Access Layer) للكيان `Utilisateur`. باستخدام Spring Data JPA، توفر هذه الواجهة طرقًا جاهزة للاستخدام لتنفيذ عمليات قاعدة البيانات الأساسية (مثل الحفظ والبحث والحذف) دون الحاجة إلى كتابة استعلامات SQL يدويًا. تحتوي أيضًا على طريقة مخصصة (`findByEmail`) للبحث عن مستخدم عن طريق بريده الإلكتروني.
    *   **الأهمية:** تبسط التفاعل مع قاعدة البيانات وتوفر طريقة موحدة لاسترداد وتخزين بيانات المستخدمين.

7.  **security/**:
    *   **الوظيفة:** هذا المجلد فارغ حاليًا، ولكنه مخصص عادةً لاحتواء الفئات المتعلقة بالأمان الإضافي، مثل مرشحات JWT (لمعالجة JSON Web Tokens) أو معالجات المصادقة المخصصة.
    *   **الأهمية:** مكان لتنظيم كود الأمان المتقدم.

8.  **service/AuthService.java**:
    *   **الوظيفة:** يحتوي على منطق الأعمال (Business Logic) الرئيسي لعمليات المصادقة. يتضمن وظائف لتسجيل مستخدم جديد (مع تجزئة كلمة المرور)، وتسجيل دخول مستخدم موجود (مع التحقق من كلمة المرور)، وإنشاء والتحقق من صحة JSON Web Tokens (JWT). يتفاعل مع `UserRepository` لاسترداد وتخزين بيانات المستخدم ومع `PasswordEncoder` لتجزئة كلمات المرور.
    *   **الأهمية:** يفصل منطق المصادقة عن وحدة التحكم (Controller) والمستودع (Repository)، مما يجعل الكود أكثر تنظيمًا وقابلية للصيانة.

9.  **service/UserDetailsServiceImpl.java**:
    *   **الوظيفة:** تنفيذ لواجهة `UserDetailsService` من Spring Security. وظيفتها هي تحميل بيانات مستخدم معين (بناءً على البريد الإلكتروني في هذه الحالة) من قاعدة البيانات (باستخدام `UserRepository`) وتوفيرها لـ Spring Security بتنسيق يفهمه (كائن `UserDetails`) لإكمال عملية المصادقة.
    *   **الأهمية:** يربط آلية المصادقة في Spring Security بكيفية تخزين بيانات المستخدم في التطبيق.
