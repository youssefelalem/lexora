<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.version0</groupId>
	<artifactId>lexora</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>lexora</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>	<properties>
		<java.version>17</java.version>
		<testcontainers.version>1.19.7</testcontainers.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<!-- Fournit les fonctionnalités de base pour construire des applications web, y compris les API RESTful, Spring MVC et un serveur Tomcat intégré -->
		</dependency>
		<dependency> <!-- Add Spring Security Starter -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
			<!-- Ajoute les fonctionnalités de Spring Security pour gérer l'authentification et le contrôle d'accès -->
		</dependency>
		<dependency> <!-- Add Spring Data JPA for database interaction -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
			<!-- Fournit le support pour Java Persistence API (JPA) pour interagir avec les bases de données, incluant Hibernate par défaut -->
		</dependency>
		<dependency> <!-- Add Spring Boot Configuration Processor -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
			<!-- Processor to generate metadata for custom configuration properties -->
		</dependency>
		<dependency> <!-- Add MySQL Connector -->
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<version>9.1.0</version>
			<!-- Pilote JDBC nécessaire pour se connecter aux bases de données MySQL -->
		</dependency>		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<!-- Fournit les outils et bibliothèques nécessaires pour tester les applications Spring Boot (par exemple, JUnit, Mockito) -->
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
			<!-- Fournit des outils pour tester les fonctionnalités de sécurité Spring -->
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
			<!-- Base Testcontainers JUnit 5 support -->
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>mysql</artifactId>
			<scope>test</scope>
			<!-- Support pour les conteneurs MySQL dans les tests -->
		</dependency>		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
			<!-- Base de données en mémoire pour les tests unitaires -->
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-suite-api</artifactId>
			<scope>test</scope>
			<!-- API pour créer des suites de tests JUnit -->
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-suite-engine</artifactId>
			<scope>test</scope>
			<!-- Moteur d'exécution pour les suites de tests JUnit -->
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
			<!-- Bibliothèque qui aide à réduire le code répétitif (par exemple, getters/setters/constructeurs) en utilisant des annotations -->
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.5</version>
			<!-- L'interface de programmation (API) pour la bibliothèque Java JWT pour manipuler les tokens JWT -->
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.5</version>
			<scope>runtime</scope>
			<!-- L'implémentation réelle de la bibliothèque Java JWT, requise à l'exécution -->
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.11.5</version>
			<scope>runtime</scope>
			<!-- Fournit l'intégration avec la bibliothèque Jackson pour le traitement JSON dans les tokens JWT, requise à l'exécution -->
		</dependency>		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
			<!-- Fournit les fonctionnalités de validation des beans (Jakarta Bean Validation) pour valider les entités et les objets de transfert de données -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
			<!-- Fournit les fonctionnalités d'envoi des emails dans l'application Spring Boot -->
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<version>1.12.0</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
